// Generated using `moon info`, DON'T EDIT IT
package "Ronlands/moonbit_zstd/api"

// Values
fn analyze_data_integrity(Bytes) -> DataIntegrityAnalysis

fn analyze_file(Bytes) -> ZSTDFileAnalysis

fn compress(Bytes) -> Bytes

fn compress_advanced(Bytes, CompressionMethod, Int) -> Bytes

fn compress_as_compressed(Bytes, Int) -> Bytes

fn compress_as_raw(Bytes, Int) -> Bytes

fn compress_as_rle(Bytes, Int) -> Bytes

fn compress_with_level(Bytes, CompressionLevel) -> Bytes

fn compress_with_level_int(Bytes, Int) -> Bytes

fn decompress(Bytes) -> Bytes

fn estimate_compressed_size(Bytes, CompressionLevel) -> Int

fn is_zstd_format(Bytes) -> Bool

fn run_all_basic_tests() -> Bool

fn run_all_compatibility_tests() -> Bool

// Errors

// Types and methods
pub enum CompressionLevel {
  Fast
  Default
  Better
  Best
}

pub enum CompressionMethod {
  Auto
  Raw
  RLE
  Compressed
}
fn CompressionMethod::output(Self, &Logger) -> Unit // from trait `Show`
fn CompressionMethod::to_string(Self) -> String // from trait `Show`
impl Show for CompressionMethod

pub struct DataIntegrityAnalysis {
  truncation_indicators : Int
  data_density : Double
  structure_consistency : Double
  entropy_level : Double
}

pub struct ZSTDFileAnalysis {
  is_valid : Bool
  error_message : String
  magic_number : UInt
  single_segment : Bool
  content_checksum : Bool
  window_size : UInt
  total_blocks : Int
  file_size : Int
  first_block_type : String
  first_block_size : Int
  last_block : Bool
}

// Type aliases

// Traits

