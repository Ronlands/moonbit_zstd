// Generated using `moon info`, DON'T EDIT IT
package "Ronlands/moonbit_zstd/encoder"

import(
  "Ronlands/moonbit_zstd/core"
)

// Values
fn compress(Bytes) -> Result[Bytes, @core.ZSTDError]

fn compress_as_compressed_block(Bytes, CompressionConfig) -> Result[Bytes, String]

fn compress_as_raw_block(Bytes, CompressionConfig) -> Result[Bytes, String]

fn compress_as_rle_block(Bytes, CompressionConfig) -> Result[Bytes, String]

fn compress_data(Bytes, CompressionConfig) -> Result[Bytes, String]

fn compress_data_with_dict(Bytes, CompressionConfig, Bytes, UInt) -> Result[Bytes, String]

fn compress_with_context(Compressor, Bytes) -> Result[(Compressor, Bytes), @core.ZSTDError]

fn create_compression_context(CompressionConfig) -> CompressionContext

fn create_config_with_level(Int) -> CompressionConfig

fn create_default_config() -> CompressionConfig

fn estimate_compressed_size(Bytes, CompressionConfig) -> Int

fn new_compressor() -> Compressor

// Errors

// Types and methods
pub struct CompressionConfig {
  level : Int
  window_log : Int
  min_match : Int
  search_depth : Int
}

pub struct CompressionContext {
  config : CompressionConfig
}

pub struct Compressor {
  level : Int
  hash_table : Array[Int]
  window_size : Int
}

// Type aliases

// Traits

