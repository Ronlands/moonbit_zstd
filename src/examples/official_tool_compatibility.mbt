/// Official ZSTD Tool Compatibility Test
/// Validates RFC 8878 requirement: decoder must correctly decompress 
/// any valid compressed data generated by official zstd CLI tool

pub fn test_user_official_file() -> Unit {
  println("\n" + @zstd_test.repeat_string("=", 60))
  println("   RFC 8878 兼容性：官方 zstd 工具生成文件测试")
  println(@zstd_test.repeat_string("=", 60))
  
  println("\n测试文件: test_1.txt")
  println("压缩工具: 官方 zstd v1.5.6")
  println(@zstd_test.repeat_string("-", 40))
  
  // Read original file
  let original = try {
    @moonbitlang/x/fs.read_file_to_bytes("src/test-data/test_1.txt")
  } catch {
    _ => {
      println("✗ 无法读取原始文件")
      return
    }
  }
  
  // Read compressed file
  let compressed = try {
    @moonbitlang/x/fs.read_file_to_bytes("src/test-data/test_1.zst")
  } catch {
    _ => {
      println("✗ 无法读取压缩文件")
      return
    }
  }
  
  println("原始文件: \{original.length()} 字节")
  println("压缩文件: \{compressed.length()} 字节")
  println("压缩比: \{(compressed.length().to_double() / original.length().to_double() * 100.0).to_int()}%")
  
  // Verify ZSTD format
  if !@zstd.is_zstd_format(compressed) {
    println("✗ 不是有效的 ZSTD 格式")
    return
  }
  println("✓ ZSTD 格式验证通过")
  
  // Decompress
  let decompressed = @zstd.decompress(compressed)
  
  // Verify result
  if original == decompressed {
    println("✓ 解压成功：数据完全一致")
    
    // Display content
    let text = try {
      @encoding/utf8.decode(original)
    } catch {
      _ => "(二进制数据)"
    }
    println("解压内容: '\{text}'")
    
    println("\n" + @zstd_test.repeat_string("=", 60))
    println("   成功！MoonBit ZSTD 解码器能够正确解压")
    println("   官方 zstd 命令行工具生成的文件！")
    println(@zstd_test.repeat_string("=", 60))
  } else {
    println("✗ 解压失败：数据不匹配")
    println("  期望: \{original.length()} 字节")
    println("  实际: \{decompressed.length()} 字节")
  }
}

