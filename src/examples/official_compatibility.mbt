/// Official ZSTD Tool Compatibility
/// RFC 8878 requirement: decoder must correctly decompress 
/// files generated by official zstd CLI tool

pub fn test_user_official_file() -> Unit {
  println("\n" + @zstd_test.repeat_string("=", 60))
  println("   RFC 8878 兼容性：官方 zstd 工具生成文件测试")
  println(@zstd_test.repeat_string("=", 60))
  
  println("\n测试文件: test_1.txt")
  println("压缩工具: 官方 zstd v1.5.6")
  println(@zstd_test.repeat_string("-", 40))
  
  let original = try {
    @fs.read_file_to_bytes("src/test-data/test_1.txt")
  } catch {
    _ => {
      println("✗ 无法读取原始文件")
      return
    }
  }
  
  let compressed = try {
    @fs.read_file_to_bytes("src/test-data/test_1.zst")
  } catch {
    _ => {
      println("✗ 无法读取压缩文件")
      return
    }
  }
  
  println("原始文件: \{original.length()} 字节")
  println("压缩文件: \{compressed.length()} 字节")
  println("压缩比: \{compressed.length() * 100 / original.length()}%")
  
  let analysis = @zstd.analyze_file(compressed)
  if analysis.is_valid {
    println("✓ ZSTD 格式验证通过")
  } else {
    println("✗ ZSTD 格式验证失败: \{analysis.error_message}")
    return
  }
  
  let decompressed = @zstd.decompress(compressed)
  if decompressed == original {
    println("✓ 解压成功：数据完全一致")
    let text = try {
      @encoding/utf8.decode(decompressed)
    } catch {
      _ => "(binary data)"
    }
    println("解压内容: '\{text}'")
  } else {
    println("✗ 解压失败：数据不一致")
    println("  原始大小: \{original.length()}")
    println("  解压大小: \{decompressed.length()}")
  }
  
  println("\n" + @zstd_test.repeat_string("=", 60))
  println("   成功！MoonBit ZSTD 解码器能够正确解压")
  println("   官方 zstd 命令行工具生成的文件！")
  println(@zstd_test.repeat_string("=", 60))
}

